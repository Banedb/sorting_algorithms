#include "sort.h"

/**
 * counting_sort - Sorts an array of integers in ascending order using the Counting sort algorithm.
 * @array: The array of integers to be sorted.
 * @size: The size of the array.
 */
void counting_sort(int *array, size_t size)
{
	size_t  max_value = 0;
	int *count_array = NULL;
	int *sorted_array = NULL;
	size_t i;

	if (array == NULL || size < 2)
		return;

	/* Find the maximum value in the given array */
	for (i = 0; i < size; i++)
	{
		if (array[i] > max_value)
			max_value = array[i];
	}

	/* Create a counting array of size max_value + 1, initialized with zeros */
	count_array = malloc((max_value + 1) * sizeof(int));
	if (count_array == NULL)
		return;

	for (i = 0; i <= max_value; i++)
		count_array[i] = 0;

	/* Count the occurrences of each value in the given array */
	for (i = 0; i < size; i++)
		count_array[array[i]]++;

	/* Print the counting array */
	printf("Counting array: ");
	for (i = 0; i <= max_value; i++)
		printf("%d ", count_array[i]);
	printf("\n");

	/* Update the counting array to store the cumulative sum */
	for (i = 1; i <= max_value; i++)
		count_array[i] += count_array[i - 1];
    
	/* Create a sorted array of size size, initialized with zeros */
	sorted_array = malloc(size * sizeof(int));
	if (sorted_array == NULL)
	{
		free(count_array);
		return;
	}

	/* Sort the given array using the counting array */
	for (i = size - 1; (int)i >= 0; i--)
	{
		sorted_array[count_array[array[i]] - 1] = array[i];
		count_array[array[i]]--;
	}

	/* Copy the sorted array back to the original array */
	for (i = 0; i < size; i++)
		array[i] = sorted_array[i];

	/* Free the allocated memory */
	free(count_array);
	free(sorted_array);
}

The big O notations of the time complexity for the Counting sort algorithm are:
- In the best case: O(n + k), where n is the size of the input array and k is the maximum value in the array.
	- In the average case: O(n + k).
	- In the worst case: O(n + k).
